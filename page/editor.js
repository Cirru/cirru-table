// Generated by CoffeeScript 1.4.0

define(function(require, exports) {
  var curr_tag, fold, input, jump, load, log, ls, onleave, shortcut, tag_code, tag_pre, utils;
  log = function() {
    return console.log.apply(console, arguments);
  };
  input = document.createElement("input");
  curr_tag = {};
  ls = localStorage;
  shortcut = {};
  jump = function(next) {
    var code, last, parent, selection;
    parent = curr_tag.parentNode;
    last = curr_tag;
    selection = last.querySelector(".selection");
    if (selection != null) {
      last.removeChild(selection);
    }
    if (next.tagName.toLowerCase() === "code") {
      input.value = next.textContent;
      curr_tag = next;
    } else {
      input.value = "";
      code = tag_code();
      next.appendChild(code);
      curr_tag = code;
    }
    if (last.textContent === "") {
      last.parentNode.removeChild(last);
    }
    if (typeof parent.onleave === "function") {
      parent.onleave();
    }
    if (typeof input.onkeyup === "function") {
      input.onkeyup();
    }
    return input.focus();
  };
  tag_code = function() {
    var code;
    code = document.createElement("code");
    code.onclick = function(click) {
      jump(code);
      click.cancelBubble = true;
      return click.returnValue = false;
    };
    return code;
  };
  onleave = function(pre) {
    return pre.onleave = function() {
      var parent;
      if (pre.childNodes.length === 0) {
        parent = pre.parentNode;
        try {
          parent.removeChild(pre);
          return typeof parent.onleave === "function" ? parent.onleave() : void 0;
        } catch (error) {
          return log("already removed:", error);
        }
      }
    };
  };
  tag_pre = function() {
    var pre;
    pre = document.createElement("pre");
    pre.onclick = function(click) {
      jump(pre);
      click.cancelBubble = true;
      return click.returnValue = false;
    };
    onleave(pre);
    return pre;
  };
  utils = require("./utils");
  utils.after();
  load = function(elem, editor, list) {
    var all, code, pre, _fn, _fn1, _i, _j, _len, _len1;
    try {
      editor.innerHTML = utils.render(list);
      Array.prototype.map.call(editor.childNodes, fold);
      all = editor.querySelectorAll("code");
      curr_tag = all[all.length - 1];
      input.value = curr_tag.textContent;
      input.focus();
      _fn = function(code) {
        return code.onclick = function(click) {
          jump(code);
          click.returnValue = false;
          return click.cancelBubble = true;
        };
      };
      for (_i = 0, _len = all.length; _i < _len; _i++) {
        code = all[_i];
        _fn(code);
      }
      all = editor.querySelectorAll("pre");
      _fn1 = function(pre) {
        pre.onclick = function(click) {
          jump(pre);
          click.returnValue = false;
          return click.cancelBubble = true;
        };
        return onleave(pre);
      };
      for (_j = 0, _len1 = all.length; _j < _len1; _j++) {
        pre = all[_j];
        _fn1(pre);
      }
      return editor.click();
    } catch (error) {
      log("fallback:", error);
      curr_tag = tag_code();
      editor.innerHTML = "";
      return editor.appendChild(curr_tag);
    }
  };
  fold = function(pre) {
    if (pre.tagName.toLowerCase() === "pre") {
      pre.className = "fold";
      if (pre.parentNode.className === "fold") {
        pre.parentNode.className = "";
      }
      return Array.prototype.map.call(pre.childNodes, fold);
    }
  };
  exports.editor = function(elem) {
    var editor, update;
    editor = elem.querySelector(".cirru-editor");
    elem.appendChild(input);
    load(elem, editor, JSON.parse(ls.list));
    update = function() {
      var height, left, start, top;
      curr_tag.innerHTML = utils.input(input);
      left = curr_tag.querySelector(".selection").offsetLeft;
      curr_tag.scrollLeft = left - 100;
      ls.list = JSON.stringify(utils.read(editor));
      curr_tag.offsetParent = editor;
      top = curr_tag.offsetTop;
      left = curr_tag.offsetLeft;
      input.style.top = "" + top + "px";
      input.style.left = "" + left + "px";
      Array.prototype.map.call(editor.childNodes, fold);
      start = elem.scrollTop;
      height = elem.offsetHeight;
      if (top < start) {
        return elem.scrollTop = top - (height / 2);
      } else if (top > (height + start)) {
        return elem.scrollTop = top + (height / 2);
      }
    };
    input.onkeypress = update;
    input.onkeyup = update;
    elem.onclick = function(click) {
      var code;
      code = tag_code();
      editor.appendChild(code);
      jump(code);
      click.returnValue = false;
      return input.focus();
    };
    input.onkeydown = function(down) {
      var code, pre, _ref;
      log(down.keyCode);
      if ((_ref = down.keyCode) === 9 || _ref === 13 || _ref === 32 || _ref === 33 || _ref === 34) {
        down.returnValue = false;
      }
      switch (down.keyCode) {
        case 9:
          return utils.tab(input);
        case 32:
          code = tag_code();
          curr_tag.after(code);
          return jump(code);
        case 13:
          pre = tag_pre();
          curr_tag.after(pre);
          code = tag_code();
          pre.appendChild(code);
          return jump(code);
        case 8:
          if (input.selectionEnd === 0) {
            shortcut["delete"]();
            return down.returnValue = false;
          }
          break;
        case 37:
          if (input.selectionEnd === 0) {
            shortcut.left();
            return down.returnValue = false;
          }
          break;
        case 39:
          log(input.selectionStart, input.value.length);
          if (input.selectionStart === input.value.length) {
            shortcut.right();
            return down.returnValue = false;
          }
          break;
        case 38:
          return shortcut.up();
        case 40:
          return shortcut.down();
        case 33:
          return shortcut.pgup();
        case 34:
          return shortcut.pgdown();
      }
    };
    shortcut["delete"] = function() {
      var parent, place, prev;
      prev = curr_tag.previousElementSibling;
      if (prev != null) {
        return prev.click();
      } else {
        parent = curr_tag.parentNode;
        if (parent.className !== "cirru-editor") {
          place = parent.parentNode;
          place.removeChild(parent);
          place.click();
          return typeof place.onleave === "function" ? place.onleave() : void 0;
        }
      }
    };
    shortcut.left = function() {
      var code, parent, place, prev;
      prev = curr_tag.previousElementSibling;
      if (prev != null) {
        return prev.click();
      } else {
        parent = curr_tag.parentNode;
        if (parent.className !== "cirru-editor") {
          code = tag_code();
          if (curr_tag.textContent === "") {
            place = parent.parentNode;
            place.insertBefore(code, parent);
          } else {
            parent.insertBefore(code, curr_tag);
          }
          return code.click();
        }
      }
    };
    shortcut.right = function() {
      var code, next, parent;
      next = curr_tag.nextElementSibling;
      if (next != null) {
        if (next.tagName.toLowerCase() === "code") {
          return next.click();
        } else {
          code = tag_code();
          next.insertAdjacentElement("afterbegin", code);
          return code.click();
        }
      } else {
        parent = curr_tag.parentNode;
        log("this parent", parent);
        if (parent.className !== "cirru-editor") {
          log("follows", parent);
          code = tag_code();
          if (curr_tag.textContent === "") {
            parent.after(code);
          } else {
            parent.appendChild(code);
          }
          return code.click();
        }
      }
    };
    shortcut.up = function() {
      var code, parent, place, prev;
      prev = curr_tag.previousElementSibling;
      while ((prev != null) && prev.tagName.toLowerCase() === "code") {
        prev = prev.previousElementSibling;
      }
      if (prev != null) {
        return prev.click();
      } else {
        parent = curr_tag.parentNode;
        if (parent.className !== "cirru-editor") {
          place = parent.parentNode;
          code = tag_code();
          place.insertBefore(code, parent);
          return code.click();
        }
      }
    };
    shortcut.down = function() {
      var code, next, parent;
      next = curr_tag.nextElementSibling;
      while ((next != null) && next.tagName.toLowerCase() === "code") {
        next = next.nextElementSibling;
      }
      if (next != null) {
        code = tag_code();
        next.insertAdjacentElement("afterbegin", code);
        return code.click();
      } else {
        parent = curr_tag.parentNode;
        log("down", parent);
        if (parent.className !== "cirru-editor") {
          code = tag_code();
          parent.after(code);
          return code.click();
        }
      }
    };
    shortcut.pgup = function() {
      var code, parent, pre, prev, _ref;
      parent = curr_tag;
      while (parent.parentNode.className !== "cirru-editor") {
        parent = parent.parentNode;
        log(parent);
      }
      prev = parent.previousElementSibling;
      while ((prev != null ? (_ref = prev.previousElementSibling) != null ? _ref.tagName.toLowerCase() : void 0 : void 0) === "code") {
        prev = prev.previousElementSibling;
      }
      if (prev != null) {
        return prev.click();
      } else {
        pre = tag_pre();
        code = tag_code();
        editor.insertAdjacentElement("afterbegin", pre);
        log("editor", editor);
        pre.appendChild(code);
        return code.click();
      }
    };
    shortcut.pgdown = function() {
      var code, next, parent, pre, _ref;
      parent = curr_tag;
      while (parent.parentNode.className !== "cirru-editor") {
        parent = parent.parentNode;
        log(parent);
      }
      next = parent.nextElementSibling;
      while ((next != null ? (_ref = next.nextElementSibling) != null ? _ref.tagName.toLowerCase() : void 0 : void 0) === "code") {
        next = next.nextElementSibling;
      }
      if (next != null) {
        return next.click();
      } else {
        pre = tag_pre();
        code = tag_code();
        editor.appendChild(pre);
        log("editor", editor);
        pre.appendChild(code);
        return code.click();
      }
    };
    exports.content = function(list) {
      if (list != null) {
        return load(elem, editor, list);
      } else {
        editor.click();
        list = utils.read(editor);
        list.pop();
        return list;
      }
    };
    return exports.focus = function() {
      return editor.focus();
    };
  };
  return exports;
});
