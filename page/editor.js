// Generated by CoffeeScript 1.4.0

define(function(require, exports) {
  var curr_tag, input, jump, log, ls, tag_code, tag_pre, utils;
  log = function() {
    return console.log.apply(console, arguments);
  };
  input = document.createElement("input");
  curr_tag = {};
  ls = localStorage;
  jump = function(next) {
    var last, selection;
    last = curr_tag;
    curr_tag = next;
    selection = last.querySelector(".selection");
    log("selection", selection);
    if (selection != null) {
      last.removeChild(selection);
    }
    input.value = next.textContent;
    if (last.textContent === "") {
      last.parentNode.removeChild(last);
    }
    input.onkeyup();
    return last;
  };
  tag_code = function() {
    var code;
    code = document.createElement("code");
    code.onclick = function() {
      return jump(code);
    };
    return code;
  };
  tag_pre = function() {
    return document.createElement("pre");
  };
  utils = require("./utils");
  utils.insertAfter();
  exports.editor = function(elem) {
    var editor, selection, update;
    editor = elem.querySelector(".cirru-editor");
    elem.appendChild(input);
    if (ls.innerHTML != null) {
      editor.innerHTML = ls.innerHTML;
      selection = editor.querySelector(".selection");
      curr_tag = selection.parentNode;
      input.value = curr_tag.textContent;
    } else {
      curr_tag = tag_code();
      editor.appendChild(curr_tag);
    }
    update = function() {
      var left;
      curr_tag.innerHTML = utils.input(input);
      left = curr_tag.querySelector(".selection").offsetLeft;
      curr_tag.scrollLeft = left - 100;
      return ls.innerHTML = editor.innerHTML;
    };
    input.onkeypress = update;
    input.onkeyup = update;
    elem.onclick = function(click) {
      input.focus();
      return click.returnValue = false;
    };
    return input.onkeydown = function(down) {
      var code, pre, _ref;
      log(down.keyCode);
      if ((_ref = down.keyCode) === 9 || _ref === 13 || _ref === 32) {
        down.returnValue = false;
      }
      switch (down.keyCode) {
        case 9:
          return utils.tab(input);
        case 32:
          code = tag_code();
          curr_tag.insertAfter(code);
          return jump(code);
        case 13:
          pre = tag_pre();
          curr_tag.insertAfter(pre);
          code = tag_code();
          pre.appendChild(code);
          return jump(code);
      }
    };
  };
  return exports;
});
